<?php

class Fusers extends FdataBase {

    /** costruttore della classe */
    public function __construct(){
        parent::__construct();
        $this->_tabella = 'Utente';
        $this->_valore ='(:id,:nome,:cognome,:email,:password,:stato)';
        $this->_classe = 'Fuser';
    }

    /**
    * Metodo che lega gli attributi dell'utente da inserire mediante il parametro INSERT
    * @param $pdostatement
    * @param $utente Eusers utente i cui dati devono essere inseriti nel database
    */
    public static function bind(PDOStatement $pdostatement, Eusers $utente){
        $pdostatement->bindValue(':id',NULL, PDO::PARAM_INT);
        $pdostatement->bindValue(':nome',$utente->getNome(), PDO::PARAM_STR);
        $pdostatement->bindValue(':cognome',$utente->getCognome(), PDO::PARAM_STR);
        $pdostatement->bindValue(':password',$utente->getPassword(), PDO::PARAM_STR);
        $pdostatement->bindValue(':email',$utente->getEmail(), PDO::PARAM_STR);
        $pdostatement->bindValue(':stato',$utente->getStato(), PDO::PARAM_STR);
    }

    /**
    * Metodo per verificare la presenza di un utente dato il nome
    * @param $name string nome dell'utente
    * @return bool|null
    */
    public function existName($name){
        $query = " SELECT * FROM ".$this->_tabella." WHERE name= '".$name."';";
        try {
            $this->_connessione->beginTransaction();
            $pdostmt = $this->_connessione->prepare($query);
            $pdostmt->execute();
            $risultato = $pdostmt->fetchAll(PDO::FETCH_ASSOC);
            $this->_connessione->commit();
            if(($risultato != null) && (count($risultato)>0)){
                return true;
            }
            else return false;
        }
        catch (PDOException $e){
            $this->_connessione->rollBack();
            echo "Errore: ".$e->getMessage();
            return null;
        }
    }

    /**
    * Metodo per verificare la presenza di un utente
    * @param $name string nome dell'utente
    * @param $password string dell'utente
    * @return false|mixed|null $id dell'utente se presente,altrimenti false
    */
    public function existUser($name,$password){
        $query = " SELECT * FROM ".$this->_tabella." WHERE name= '".$name."';";
        try {
            $this->_connessione->beginTransaction();
            $pdostmt = $this->_connessione->prepare($query);
            $pdostmt->execute();
            $risultato = $pdostmt->fetchAll(PDO::FETCH_ASSOC);
            $this->_connessione->commit();
            if (($risultato != null) && (count($risultato)>0)){
                $riga = $risultato[0];
                $id = $riga['id'];
                return $id;
            }
            else return false;
        }
        catch (PDOException $e){
            $this->_connessione->rollBack();
            echo "Errore: ".$e->getMessage();
            return null;
        }
    }

    /**
    * Metodo che effettua la load dell'utente utilizzando l'id
    * @param $id int dell'utente
    * @return string|null utente
    */
    public function loadById(int $id){
        $riferimento = parent::loadById($id);
        if (($riferimento != null) && (count($riferimento)>0)){
            $riga = $riferimento[0];
            $intera = $this->buildRow($riga);
            $user = $this->getUtente($intera);
            return $user;
        }
        else return null;
    }

    /**
    * Metodo che crea un oggetto di tipo Eusers
    * @param $riga che si riferisce alla tupla
    * @return Eusers
    */
    public function getUtente($riga){
        $ogg = new Eusers($riga['nome'], $riga['cognome'], $riga['email'], $riga['password']);
        $ogg->setIDutente($riga['id']);
        $ogg->setCommenti($riga['commenti']);
        $ogg->setStato($riga['stato']);
        return $ogg;
    }

    /**
    * Metodo che crea una riga per l'utente
    * @param $riga presente nel database
    * @return mixed
    */
    public function buildRow($riga){
        $comm = new FCommenti();
        $lista = $comm->loadById($riga['id']);
        $riga['commenti'] = $lista;
        return $riga;
    }

    /**
    * Metodo che cerca utenti con una determinato valore presente in un attributo
    * @param $contenuto da cercare
    * @param $attributo sul quale troviamo $contenuto
    * @return array|null users
    */
    public function search($contenuto, $attributo){
        $risultati = parent::search($contenuto, $attributo); // TODO: Change the autogenerated stub
        if(($risultati != null) && (count($risultati)>0)){
            $listauser = array();
            foreach ($risultati as $risultato){
                $riga = $this->buildRow($risultato);
                $user = $this->getUtente($riga);
                array_push($listauser, $user);
            }
            return $listauser;
        }
        else return null;
    }

}


?>